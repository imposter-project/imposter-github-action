name: 'Start Imposter Mocks'
description: 'Starts the Imposter mock server in the background'

inputs:
  config-dir:
    description: 'Path to the directory containing the Imposter configuration files'
    required: false
    default: './mocks'
  port:
    description: 'Port number for the Imposter server'
    required: false
    default: '8080'
  version:
    description: 'Version of the Imposter mock engine to use'
    required: false
    default: ''
  engine-type:
    description: 'Type of mock engine to use (jvm or docker)'
    required: false
    default: 'docker'
  recursive-config-scan:
    description: 'Whether to recursively scan the config directory for mock configurations'
    required: false
    default: 'false'
  auto-restart:
    description: 'Whether to automatically restart the mock server when configuration changes'
    required: false
    default: 'false'
  max-attempts:
    description: 'Maximum number of attempts to check if the server is ready'
    required: false
    default: '30'
  retry-interval:
    description: 'Interval in seconds between retry attempts'
    required: false
    default: '1'

outputs:
  base-url:
    description: 'Base URL of the mock server'
    value: http://localhost:${{ inputs.port }}

runs:
  using: "composite"
  steps:
    - name: Pull Imposter engine
      shell: bash
      run: |
        echo "Pulling ${{ inputs.engine-type }} engine"
        if [ ! -z "${{ inputs.version }}" ]; then
          imposter engine pull --engine-type ${{ inputs.engine-type }} --version ${{ inputs.version }} --config "${{ inputs.config-dir }}/.imposter.yaml"
        else
          imposter engine pull --engine-type ${{ inputs.engine-type }} --config "${{ inputs.config-dir }}/.imposter.yaml"
        fi

    - name: Start Imposter server
      shell: bash
      run: |
        # Build command with optional version and engine type
        cmd="imposter up --port ${{ inputs.port }} --engine-type ${{ inputs.engine-type }}"
        if [ ! -z "${{ inputs.version }}" ]; then
          cmd="$cmd --version ${{ inputs.version }}"
        fi
        cmd="$cmd --recursive-config-scan=${{ inputs.recursive-config-scan }} --auto-restart=${{ inputs.auto-restart }} --config \"${{ inputs.config-dir }}/.imposter.yaml\" \"${{ inputs.config-dir }}\""
        
        # Start the server
        eval "$cmd" &
        
        # Wait for server to be ready
        max_attempts=${{ inputs.max-attempts }}
        attempt=1
        health_check_url="http://localhost:${{ inputs.port }}/system/status"
        echo "Waiting for Imposter server to start at: $health_check_url"
        until curl -s -o /dev/null -w "%{http_code}" "$health_check_url" | grep -q "200"; do
          if [ $attempt -ge $max_attempts ]; then
            echo "Timeout waiting for Imposter server to start"
            exit 1
          fi
          echo "Waiting for Imposter server to start (attempt $attempt/$max_attempts)..."
          sleep ${{ inputs.retry-interval }}
          attempt=$((attempt + 1))
        done
        echo "Imposter server is ready" 